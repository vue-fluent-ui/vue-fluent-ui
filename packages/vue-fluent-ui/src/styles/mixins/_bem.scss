/**
 * @fileOverview BEM 相关的 mixins
 * @description 提供了 b, e, m, when 四个核心 mixin，用于快速、规范地编写 BEM 风格的 SCSS。
 */
@use 'config';
@use "sass:selector";

// Block, Element 的简写，作为全局变量，方便在 mixin 间通信。
$B: null !default;
$E: null !default;

/**
 * @name b
 * @description 创建一个 BEM Block (块)。
 * @param {String} $block - Block 的名称。
 *
 * @example
 * @include b(button) {
 *   color: red;
 * }
 *
 * // CSS Output:
 * .vf-button {
 *   color: red;
 * }
 */
@mixin b($block) {
  $B: $namespace + $namespace-separator + $block !global;

  .#{$B} {
    @content;
  }
}

/**
 * @name e
 * @description 创建一个 BEM Element (元素)。必须在 b (Block) 内部使用。
 * @param {String} $element - Element 的名称。
 *
 * @example
 * @include b(card) {
 *   @include e(header) {
 *     font-size: 16px;
 *   }
 * }
 *
 * // CSS Output:
 * .vf-card__header {
 *   font-size: 16px;
 * }
 *
 * // 嵌套或复杂选择器场景
 * .theme-dark {
 *   @include b(card) {
 *     @include e(header) {
 *       color: white;
 *     }
 *   }
 * }
 *
 * // CSS Output:
 * .theme-dark .vf-card .vf-card__header {
 *   color: white;
 * }
 */
@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: #{'.' + $B + config.$element-separator + $element};
  @if hitAllSpecialRules($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

/**
 * @name m
 * @description 创建一个 BEM Modifier (修饰符)。可以在 b (Block) 或 e (Element) 内部使用。
 * @param {String} $modifier - Modifier 的名称。
 *
 * @example
 * @include b(button) {
 *   // ...
 *   @include m(primary) {
 *     background-color: blue;
 *   }
 * }
 *
 * @include e(icon) {
 *   // ...
 *   @include m(disabled) {
 *     opacity: 0.5;
 *   }
 * }
 *
 * // CSS Output:
 * .vf-button--primary {
 *   background-color: blue;
 * }
 * .vf-button__icon--disabled {
 *   opacity: 0.5;
 * }
 */
@mixin m($modifier) {
  $selector: &;
  $currentSelector: #{$selector + config.$modifier-separator + $modifier};
  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

/**
 * @name when
 * @description 创建一个状态类，用于表示组件的某种状态（如 disabled, active）。
 * 状态类会以命名空间为前缀，并与当前选择器组合。
 * @param {String} $state - 状态名称。
 *
 * @example
 * @include b(button) {
 *   @include when(disabled) {
 *     cursor: not-allowed;
 *   }
 * }
 *
 * // CSS Output (假设 namespace 为 'vf'):
 * .vf-button.vf-disabled {
 *   cursor: not-allowed;
 * }
 */
@mixin when($state) {
  @at-root {
    &.#{config.$namespace+config.$namespace-separator+$state} {
      @content;
    }
  }
}

/**
 * @description 内部辅助函数，用于判断当前选择器 (&) 是否为纯粹的 Block 选择器。
 *              例如，当在 `.theme-dark .vf-button` 中使用 @include e 时，& 不是纯粹的 `.vf-button`，
 *              此函数将返回 true，从而触发特殊选择器生成逻辑。
 * @param {String} $selector - 当前上下文选择器 (&)。
 * @returns {Boolean} - 如果选择器比 Block 选择器更复杂，则返回 true。
 */
@function hitAllSpecialRules($selector) {
  $blockSelector: "." + $B;
  // 检查 $selector 和 $blockSelector 是否完全等价
  $is-equivalent: selector.is-superselector($selector,$blockSelector) and selector.is-superselector($blockSelector,$selector);
  @return not $is-equivalent;
}